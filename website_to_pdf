#!/bin/zsh
# This program accepts a url seed for a website and generates a combined PDF output.
# Requirements:
#  - a Bourne-compatible shell (e.g. bash or zsh)
#  - Homebrew package manager
#  - imagemagick
#  - img2pdf
#  - ocrmypdf

outdir="$HOME/web-to-pdf-italy-tester"

url=$(enquirer input -m "Enter URL seed: ")
echo "You entered ${url}"

apiflash_endpoint="https://api.apiflash.com/v1/urltoimage"
access_key="a6673cff3601450da95edb5a806de84a"
# url_root=${url%/*.*}
url_root=${url:0:18}
fresh=false

echo 'Brew binary exists?'
if command -v brew > /dev/null 2>&1; then
  echo OK
else
  # echo Brew not found. Installing...
  echo 'Brew not found. Please paste the following line into the terminal to install:'
  echo '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"'
  exit 1
  # /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi

brew_formulas=()
echo 'Imagemagick exists?'
if brew ls --versions imagemagick > /dev/null; then
  echo OK
  # The package is installed
else
  echo 'imagemagick not installed. Queueing for installation...'
  brew_formulas+=('imagemagick')
  # The package is not installed
fi

echo 'OCRmyPDF exists?'
if brew ls --versions ocrmypdf > /dev/null; then
  echo OK
else
  echo 'OCRmyPDF not installed. Queueing for installation...'
  brew_formulas+=('ocrmypdf')
fi

echo 'Enquirer exists?'
if brew ls --versions enquirer > /dev/null; then
  echo OK
else
  echo 'Enquirer not installed. Installing tap formula...'
  brew tap termapps/tap
  brew install enquirer
fi

for i in "${brew_formulas[@]}"
do
  brew install $i
done

# urls=($(linkchecker ${url} --verbose -r=1 --ignore=About --file-output=csv | grep '^Real URL' | sed 's/Real URL   //g' | sed "s/.*(?<!\.(jpg|xml))$//g")) > ${outdir}/links-2.txt
# linkchecker ${url} --verbose -r=1 --file-output=csv | grep '^Real URL' | sed 's/Real URL   //g' | sed "s/.*(?<!\.(jpg|xml|js|svg))$//g" > ${outdir}/links-2.txt
# linkchecker ${url} --verbose -r=1 --file-output=csv | grep '^Real URL' | sed 's/Real URL   //g' | sed '/.*(?<!\.(jpg|xml|js|svg))$/d' > ${outdir}/links-2.txt
# urls=($(linkchecker ${url} --verbose -r=1 --file-output=csv | grep '^Real URL' | sed 's/Real URL   //g' | grep "^${url}"))

echo 'Gathering individual URLs...'
urls=($(linkchecker ${url} --verbose -r=1 --file-output=csv | grep '^Real URL' | sed 's/Real URL   //g' | grep ${url_root}))


## Uncomment to echo final linkchecker results
# for i in "${urls[@]}"
# do
# echo "Link ${i}"
# done


# printf '%s' "${urls[@]}"
# urls_list=$(printf "%s " "${urls[@]}")
# echo "URLS ${urls}"
urls_sorted=($(enquirer sort -m "Sort order of pages:" ${urls[@]}))
# echo "Sorted results: ${urls_sorted}"

# for i in "${urls_sorted[@]}"
# do
# echo "Sorted ${i}"
# done

# exit 1

#> ${outdir}/links-2.txt
# linkchecker ${url} --verbose -r=1 --file-output=csv | grep '^Real URL' | sed 's/Real URL   //g' | awk "!/.*(?<!jpg|xml|js|svg)$/d" > ${outdir}/links-2.txt
# echo ${#urls}

# Create a place for the screenshots
mkdir -p ${outdir}
mkdir -p ${outdir}/cropped

## Loop through the URLS array and fetch screenshots of each
j=0
for i in "${urls_sorted[@]}"
do
   if [[ ! $i =~ .*\.(svg|png|js|css|xml)$ ]]; then
    echo "Generating screenshot of $i..."
    ## Uncomment to capture images
    # curl --request GET --url "${apiflash_endpoint}?access_key=${access_key}&url=${i}&width=1280&full_page=true&fresh=${fresh}&format=jpeg&quality=100" > ${outdir}/apiflash-${j}.jpg
    echo DONE
    j=$((j + 1))
  fi
done

# echo 'Removing first screenshot as duplicate...'
# rm ${outdir}/*-0.jpg
# echo DONE

# magick ${outdir}/*.png ${outdir}/page-%d.pdf
# convert ${outdir}/*.png -background white -alpha remove -alpha off ready-%d.png
# img2pdf ${outdir}/*.png | ocrmypdf --output-type pdf - complete.pdf
# convert ${outdir}/*.png -background white -alpha remove -alpha off {}
# mogrify ${outdir}/*.png -background white -alpha remove -alpha off
# img2pdf ${outdir}/*.jpg | ocrmypdf --output-type pdf --optimize 2 - ${outdir}/complete.pdf

echo 'Combining screenshots...'
convert -append ${outdir}/*.jpg ${outdir}/full.jpg
echo DONE

echo 'Normalizing sizes...'
convert -crop 1280x1920 +repage ${outdir}/full.jpg ${outdir}/cropped/cropped_%d.jpg
echo DONE

# convert -bordercolor white -border 0x50 ./cropped/*.jpg ./border/border_%d.jpg
# img2pdf --output 6.pdf --pagesize Letter --imgsize 8in --fit fill ./cropped/*.jpg

echo 'Building PDF...'
# img2pdf --output ${outdir}/complete.pdf --pagesize Letter --imgsize 8inx10.5in --border 1cm:0 ${outdir}/cropped/*.jpg
# img2pdf ${outdir}/cropped/*.jpg --pagesize Letter --imgsize 8inx10.5in --border 1cm:0 | ocrmypdf --output-type pdf --optimize 2 - ${outdir}/complete.pdf
img2pdf ${outdir}/cropped/*.jpg --pagesize Letter --imgsize 8inx10.5in --border 1cm:0 | ocrmypdf --output-type pdf - ${outdir}/complete.pdf
echo DONE
echo "Find the complete PDF at ${outdir}/complete.pdf"
